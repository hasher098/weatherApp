{"version":3,"sources":["api/weatherClient.ts","components/autoComplete/AutoCompleteStyles.ts","components/weatherInfo/WeatherInfoStyles.ts","components/weatherInfo/WeatherInfo.tsx","components/autoComplete/AutoComplete.tsx","rain.png","components/topBar/TopBarStyles.ts","components/topBar/TopBar.tsx","background.jpg","components/mainPage/MainPageStyles.ts","components/mainPage/MainPage.tsx","reportWebVitals.ts","index.tsx"],"names":["require","config","getCities","city","a","axios","get","process","then","response","data","catch","error","getDetails","lat","lng","getFutureWeather","lon","useStyles","makeStyles","theme","gridSearchBar","display","background","borderRadius","border","width","searchInput","color","textAlign","outline","minHeight","fontSize","fontWeight","searchButton","backgroundColor","margin","cursor","autoComplete","maxWidth","borderTop","borderLeft","borderRight","padding","option","backdropFilter","borderBottom","topPart","optionText","todayWeather","boxShadow","marginBottom","infoContainer","verticalPart","horizontalPart","temperature","futureDayInfo","WeatherInfo","props","styles","useState","currentInfo","SetCurrentInfo","futureInfo","setFutureInfo","currentCountry","setCurrentCountry","showPosition","position","coords","latitude","longitude","countryCode","showError","code","PERMISSION_DENIED","console","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","useEffect","navigator","geolocation","getCurrentPosition","log","CityName","weatherInfo","name","Temperature","main","temp","Description","weather","description","WindSpeed","wind","speed","WindDegree","deg","Pressure","pressure","Cloudiness","clouds","all","IconId","icon","undefined","futureData","daily","i","newDate","Date","setDate","getDate","day","toLocaleDateString","weekday","dayTemp","Math","round","toString","nightTemp","night","dayName","iconId","Grid","container","item","xs","className","md","charAt","toUpperCase","substring","style","transform","src","parseInt","map","index","AutoComplete","classes","setData","setFutureData","setDisplay","displayWeatherInfo","setDisplayWeatherInfo","search","setSearch","useRef","setCities","setAutoCompleteCities","fetchCities","resp","fetchFutureCities","coord","arrayCities","jsonData","forEach","push","CapitalName","autoCompleteChange","event","target","value","jsonp","err","message","placeholder","onClick","onChange","onKeyDown","key","image","backgroundImage","Image","menu","justifyContent","links","listStyle","button","fontFamily","TopBar","href","fixedBg","top","left","zIndex","height","bg","backgroundSize","app","MainPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ba9c9da.chunk.js","sourcesContent":["import axios from \"axios\";\r\nrequire(\"dotenv\").config();\r\nexport const getCities = async (city) => {\r\n  return await axios\r\n    .get(\r\n      `https://api.openweathermap.org/data/2.5/weather?&lang=en&q=${city}&appid=${process.env.REACT_APP_WEATHER_KEY}&units=metric`\r\n    )\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return error.response.data.error;\r\n    });\r\n};\r\nexport const getDetails = async (lat, lng) => {\r\n  return await axios.get(\r\n    `http://api.geonames.org/countryCodeJSON?formatted=true&lat=${lat}&lng=${lng}&username=hasher098&style=full`\r\n  );\r\n};\r\n\r\nexport const getFutureWeather = async (lat, lon) => {\r\n  return await axios\r\n    .get(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,current,hourly,alerts&appid=${process.env.REACT_APP_WEATHER_KEY}&units=metric&lang=pl`\r\n    )\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return error.response.data.error;\r\n    });\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"styled-components\";\r\nexport const useStyles = makeStyles((theme) => ({\r\n  gridSearchBar: {\r\n    display: \"flex\",\r\n    background: \"rgba( 67, 54, 243, 0.25 )\",\r\n    borderRadius: \"45px\",\r\n    border: \"2px solid white\",\r\n    width: \"100%\",\r\n  },\r\n  searchInput: {\r\n    background: \"transparent\",\r\n    borderRadius: \"45px\",\r\n    color: \"white\",\r\n    border: \"0\",\r\n    width: \"100%\",\r\n    \"&::placeholder\": {\r\n      textAlign: \"center\",\r\n      color: \"white\",\r\n    },\r\n    \"&:focus-visible\": {\r\n      outline: \"0\",\r\n    },\r\n    minHeight: \"50px\",\r\n    textAlign: \"center\",\r\n    fontSize: \"20px\",\r\n    fontWeight: \"bolder\",\r\n  },\r\n  searchButton: {\r\n    border: \"none\",\r\n    backgroundColor: \"transparent\",\r\n    color: \"white\",\r\n    margin: \"auto\",\r\n    cursor: \"pointer\",\r\n  },\r\n  autoComplete: {\r\n    maxWidth: \"360px\",\r\n    margin: \"15px\",\r\n    fontSize: \"20px\",\r\n    borderTop: \"2px solid gray\",\r\n    borderLeft: \"2px solid gray\",\r\n    borderRight: \"2px solid gray\",\r\n    borderRadius: \"30px\",\r\n    padding: \"10px\",\r\n    background: \"white\",\r\n  },\r\n  option: {\r\n    background: \"white\",\r\n    color: \"black\",\r\n    backdropFilter: \" blur( 0.0px )\",\r\n    borderBottom: \"2px solid gray\",\r\n    \"&:hover\": {\r\n      background: \"rgba( 67, 54, 90, 0.3 )\",\r\n    },\r\n  },\r\n  topPart: {\r\n    margin: \"auto\",\r\n    width: \"310px\",\r\n    minHeight: \"250px\",\r\n  },\r\n  optionText: {\r\n    fontWeight: \"lighter\",\r\n  },\r\n}));\r\n\r\n// export const SearchBar = styled.input`\r\n//   border: none;\r\n//   width: 300px;\r\n//   height: 50px;\r\n//   outline: none;\r\n//   border: 1px solid white;\r\n//   border-radius: 45px;\r\n//   margin-top: 2rem;\r\n//   text-align: center;\r\n//   font-size: 20px;\r\n//   text-decoration: none;\r\n//   :focus::-webkit-input-placeholder {\r\n//     color: gray;\r\n//     -webkit-transition: all 0.4s ease;\r\n//     -ms-transition: all 0.4s ease;\r\n//     -moz-transition: all 0.4s ease;\r\n//     -o-transition: all 0.4s ease;\r\n//     transition: all 0.4s ease;\r\n//   }\r\n//   :focus::-moz-placeholder {\r\n//     color: gray;\r\n//     -webkit-transition: all 0.4s ease;\r\n//     -ms-transition: all 0.4s ease;\r\n//     -moz-transition: all 0.4s ease;\r\n//     -o-transition: all 0.4s ease;\r\n//     transition: all 0.4s ease;\r\n//   }\r\n//   :focus:-moz-placeholder {\r\n//     color: gray;\r\n//     -webkit-transition: all 0.4s ease;\r\n//     -ms-transition: all 0.4s ease;\r\n//     -moz-transition: all 0.4s ease;\r\n//     -o-transition: all 0.4s ease;\r\n//     transition: all 0.4s ease;\r\n//   }\r\n//     :focus::-webkit-input-placeholder {\r\n//       border: none;\r\n//       transition: text-indent 0.3s 0.45s ease;\r\n//       text-indent: -150%;\r\n//       opacity: 1;\r\n//     }\r\n\r\n//   :focus::-webkit-input-placeholder {\r\n//     color: transparent;\r\n//   }\r\n//   :focus::-moz-placeholder {\r\n//     color: transparent;\r\n//   }\r\n//   :focus:-moz-placeholder {\r\n//     color: transparent;\r\n//   }\r\n// `;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  todayWeather: {\r\n    color: \"white\",\r\n    background: \"rgba( 255, 255, 255, 0.25 )\",\r\n    boxShadow: \"0 8px 32px 0 rgba( 31, 38, 135, 0.37 )\",\r\n    backdropFilter: \" blur( 0.0px )\",\r\n    borderRadius: \"10px\",\r\n    border: \"1px solid rgba( 255, 255, 255, 0.18 )\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  infoContainer: {\r\n    fontSize: \"26px\",\r\n    fontWeight: \"lighter\",\r\n  },\r\n  verticalPart: {\r\n    textAlign: \"center\",\r\n  },\r\n  horizontalPart: {\r\n    textAlign: \"center\",\r\n    fontSize: \"30px\",\r\n    fontWeight: \"bolder\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  temperature: {\r\n    fontSize: \"80px\",\r\n  },\r\n  futureDayInfo: {\r\n    color: \"white\",\r\n    background: \"rgba( 255, 255, 255, 0.25 )\",\r\n    backdropFilter: \" blur( 0.0px )\",\r\n    borderRadius: \"10px\",\r\n    border: \"1px solid rgba( 255, 255, 255, 0.18 )\",\r\n    padding: \"20px\",\r\n    margin: \"10px\",\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n","import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useStyles } from \"./WeatherInfoStyles\";\r\nimport { getDetails } from \"../../api/weatherClient\";\r\nimport CityInfoInterface from \"../../interfaces/CityInfoInterface\";\r\nimport FutureInfoInterface from \"../../interfaces/FutureInfoInterface\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ArrowUpwardRoundedIcon from \"@material-ui/icons/ArrowUpwardRounded\";\r\nconst WeatherInfo = (props) => {\r\n  const styles = useStyles();\r\n  const [currentInfo, SetCurrentInfo] = useState<CityInfoInterface>({});\r\n  const [futureInfo, setFutureInfo] = useState<FutureInfoInterface[]>([{}]);\r\n  const [currentCountry, setCurrentCountry] = useState(\"\");\r\n  const showPosition = async (position) => {\r\n    const response = await getDetails(\r\n      position.coords.latitude,\r\n      position.coords.longitude\r\n    );\r\n    setCurrentCountry(response.data.countryCode);\r\n  };\r\n  const showError = (error) => {\r\n    switch (error.code) {\r\n      case error.PERMISSION_DENIED:\r\n        console.error(\"User denied the request for Geolocation.\");\r\n        break;\r\n      case error.POSITION_UNAVAILABLE:\r\n        console.error(\"Location information is unavailable.\");\r\n        break;\r\n      case error.TIMEOUT:\r\n        console.error(\"The request to get user location timed out.\");\r\n        break;\r\n      case error.UNKNOWN_ERROR:\r\n        console.error(\"An unknown error occurred.\");\r\n        break;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\r\n    } else {\r\n      console.log(\"error\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    SetCurrentInfo({\r\n      CityName: props.weatherInfo.name,\r\n      Temperature: props.weatherInfo.main.temp,\r\n      Description: props.weatherInfo.weather[0].description,\r\n      WindSpeed: props.weatherInfo.wind.speed,\r\n      WindDegree: props.weatherInfo.wind.deg,\r\n      Pressure: props.weatherInfo.main.pressure,\r\n      Cloudiness: props.weatherInfo.clouds.all,\r\n      IconId: props.weatherInfo.weather[0].icon,\r\n    });\r\n  }, [props.weatherInfo]);\r\n\r\n  useEffect(() => {\r\n    if (props.futureData.daily != undefined) {\r\n      setFutureInfo([]);\r\n\r\n      for (let i = 1; i < 8; i++) {\r\n        const newDate = new Date();\r\n        newDate.setDate(newDate.getDate() + i);\r\n        const day = new Date(newDate).toLocaleDateString(\"en-us\", {\r\n          weekday: \"long\",\r\n        });\r\n        setFutureInfo((futureInfo) => [\r\n          ...futureInfo,\r\n          {\r\n            dayTemp: Math.round(props.futureData.daily[i].temp.day).toString(),\r\n            nightTemp: Math.round(\r\n              props.futureData.daily[i].temp.night\r\n            ).toString(),\r\n            dayName: day,\r\n            iconId: props.futureData.daily[i].weather[0].icon,\r\n          },\r\n        ]);\r\n      }\r\n    }\r\n  }, [props.futureData]);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid container item xs={12} className={styles.todayWeather}>\r\n        {currentCountry != \"\" && (\r\n          <Grid container item xs={12} className={styles.infoContainer}>\r\n            <Grid item xs={12} className={styles.horizontalPart}>\r\n              {currentInfo.CityName}\r\n            </Grid>\r\n            <Grid item xs={12} md={4} className={styles.verticalPart}>\r\n              <Grid item xs={12}>\r\n                {currentInfo.Description &&\r\n                  currentInfo.Description.charAt(0).toUpperCase() +\r\n                    currentInfo.Description.substring(1)}\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                {currentInfo.WindSpeed} KM/H\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                Wind Direction:\r\n                <ArrowUpwardRoundedIcon\r\n                  style={{ transform: `rotate(${currentInfo.WindDegree}deg)` }}\r\n                ></ArrowUpwardRoundedIcon>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <img\r\n                  src={`http://openweathermap.org/img/wn/${currentInfo.IconId}@2x.png`}\r\n                ></img>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={4} className={styles.verticalPart}>\r\n              <Grid item xs={12} className={styles.temperature}>\r\n                {currentInfo.Temperature && parseInt(currentInfo.Temperature)}°C\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container item xs={12} md={4} className={styles.verticalPart}>\r\n              <Grid item xs={12}>\r\n                Pressure: {currentInfo.Pressure}hPa\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                Cloudiness: {currentInfo.Cloudiness}%\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n      <Grid container item xs={12}>\r\n        <Grid container>\r\n          {futureInfo &&\r\n            futureInfo.map((item, index) => {\r\n              return (\r\n                <Grid\r\n                  className={styles.futureDayInfo}\r\n                  container\r\n                  item\r\n                  xs\r\n                  key={index}\r\n                >\r\n                  <Grid item xs={12}>\r\n                    {item.dayName}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    {item.iconId && (\r\n                      <img\r\n                        src={`http://openweathermap.org/img/wn/${item.iconId}@2x.png`}\r\n                      ></img>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    {item.dayTemp}°C\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    {item.nightTemp}°C\r\n                  </Grid>\r\n                </Grid>\r\n              );\r\n            })}\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { getCities, getFutureWeather } from \"../../api/weatherClient\";\r\nimport { useStyles } from \"./AutoCompleteStyles\";\r\nimport jsonData from \"../../data/countries.json\";\r\nimport JsonInterface from \"../../interfaces/JsonInterface\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport jsonp from \"jsonp\";\r\nimport WeatherInfo from \"../weatherInfo/WeatherInfo\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nconst AutoComplete = () => {\r\n  const classes = useStyles();\r\n  const [data, setData] = useState(\"\");\r\n  const [futureData, setFutureData] = useState(\"\");\r\n  const [display, setDisplay] = useState(false);\r\n  const [displayWeatherInfo, setDisplayWeatherInfo] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const wrapperRef = useRef(null);\r\n  const [cities, setCities] = useState<any>([]);\r\n\r\n  //new Part\r\n  const [autoCompleteCities, setAutoCompleteCities] = useState([\r\n    \"No results found\",\r\n  ]);\r\n\r\n  const fetchCities = async (city) => {\r\n    const resp = await getCities(city);\r\n\r\n    if (resp != undefined) {\r\n      setData(resp);\r\n      fetchFutureCities(resp.coord.lat, resp.coord.lon);\r\n      setDisplayWeatherInfo(true);\r\n    } else {\r\n      setDisplayWeatherInfo(false);\r\n    }\r\n  };\r\n\r\n  const fetchFutureCities = async (lat, lon) => {\r\n    const resp = await getFutureWeather(lat, lon);\r\n    if (resp != undefined) {\r\n      setFutureData(resp);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const arrayCities: string[] = [];\r\n    jsonData.forEach((item) => {\r\n      arrayCities.push(item.CapitalName);\r\n    });\r\n    setCities(arrayCities);\r\n  }, []);\r\n\r\n  const updateValue = (city) => {\r\n    if (city != \"No results found\") {\r\n      setSearch(city);\r\n      const str = city.substring(0, city.indexOf(\",\"));\r\n      fetchCities(str);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      fetchCities(search);\r\n      setDisplay(false);\r\n    }\r\n  };\r\n\r\n  //new Version\r\n\r\n  const autoCompleteChange = async (event) => {\r\n    setDisplay(true);\r\n    setSearch(event.target.value);\r\n    jsonp(\r\n      `http://gd.geobytes.com/AutoCompleteCity?q=${event.target.value}&sort=size`,\r\n      null,\r\n      (err, data) => {\r\n        if (err) {\r\n          console.error(err.message);\r\n        } else {\r\n          if (data[0] !== \"%s\" && data[0] !== \"\") {\r\n            setAutoCompleteCities(data);\r\n          } else {\r\n            setAutoCompleteCities([\"No results found\"]);\r\n          }\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.topPart}>\r\n        <div className={classes.gridSearchBar}>\r\n          <input\r\n            placeholder=\"City\"\r\n            className={classes.searchInput}\r\n            onClick={() => setDisplay(!display)}\r\n            value={search}\r\n            onChange={autoCompleteChange}\r\n            onKeyDown={handleKeyDown}\r\n          ></input>\r\n          <SearchIcon\r\n            className={classes.searchButton}\r\n            onClick={() => {\r\n              fetchCities(search);\r\n              setDisplay(false);\r\n            }}\r\n          ></SearchIcon>\r\n        </div>\r\n\r\n        {/* {display && (\r\n          <div className={classes.autoComplete}>\r\n            {autoCompleteCities.slice(0, 5).map((value, i) => {\r\n              return (\r\n                <div\r\n                  onClick={() => updateValue(value)}\r\n                  className={classes.option}\r\n                  key={i}\r\n                >\r\n                  <span className={classes.optionText}>{value}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )} */}\r\n      </div>\r\n      {displayWeatherInfo && (\r\n        <WeatherInfo weatherInfo={data} futureData={futureData}></WeatherInfo>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoComplete;\r\n","export default __webpack_public_path__ + \"static/media/rain.48651fe4.png\";","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Image from \"../../rain.png\";\r\nexport const useStyles = makeStyles((theme) => ({\r\n  image: {\r\n    backgroundImage: `url(${Image})`,\r\n  },\r\n  menu: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  links: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    listStyle: \"none\",\r\n    padding: \"0px\",\r\n  },\r\n  button: {\r\n    background: \"transparent\",\r\n    border: \"0px\",\r\n    fontWeight: \"bold\",\r\n    fontFamily: \"inherit\",\r\n    fontSize: \"18px\",\r\n    padding: \"1.5rem 1.5rem 1.5rem 1.5rem\",\r\n    color: \"white\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    cursor: \"pointer\",\r\n    position: \"relative\",\r\n  },\r\n}));\r\n","import React from \"react\";\r\nimport { useStyles } from \"./TopBarStyles\";\r\n\r\nconst TopBar = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.menu}>\r\n      <nav>\r\n        <ul className={classes.links}>\r\n          <li>\r\n            <button className={classes.button}>Contact</button>\r\n          </li>\r\n          <li>\r\n            <button className={classes.button}>Author</button>\r\n          </li>\r\n          <li>\r\n            <button className={classes.button}>\r\n              <a href=\"https://www.github.com/hasher098\">Source</a>\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n","export default __webpack_public_path__ + \"static/media/background.fe6cd0d8.jpg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"styled-components\";\r\nimport bg from \"../../background.jpg\";\r\nexport const useStyles = makeStyles((theme) => ({\r\n  fixedBg: {\r\n    position: \"fixed\",\r\n    top: 0,\r\n    left: 0,\r\n    zIndex: -1,\r\n    width: \"100%\",\r\n    height: \"100vh\",\r\n    background: `url(${bg})`,\r\n    backgroundSize: \"cover\",\r\n  },\r\n  app: {\r\n    zIndex: 1,\r\n    position: \"relative\",\r\n    minHeight: \"100vh\",\r\n  },\r\n}));\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport AutoComplete from \"../autoComplete/AutoComplete\";\r\nimport TopBar from \"../topBar/TopBar\";\r\nimport WeatherInfo from \"../weatherInfo/WeatherInfo\";\r\nimport { useStyles } from \"./MainPageStyles\";\r\nconst MainPage = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.app}>\r\n      <div className={classes.fixedBg}></div>\r\n      <TopBar></TopBar>\r\n      <AutoComplete></AutoComplete>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport MainPage from \"./components/mainPage/MainPage\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage></MainPage>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}